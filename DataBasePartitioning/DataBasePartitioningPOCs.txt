THese tables present in Windows Partitioning database
1)Creating Partition :

 CREATE TABLE Sales (
    ->   customer_id int NOT NULL,
    ->   customer_name varchar(40),
    ->   store_id varchar(20) NOT NULL,
    ->   bill_number int NOT NULL,
    ->   bill_date date PRIMARY KEY NOT NULL,
    ->   amount decimal(8, 2) NOT NULL
    -> )
    -> PARTITION BY RANGE (YEAR(bill_date)) (
    -> PARTITION p0 VALUES LESS THAN (2016),
    -> PARTITION p1 VALUES LESS THAN (2017),
    -> PARTITION p2 VALUES LESS THAN (2018),
    -> PARTITION p3 VALUES LESS THAN (2020)
       );


2)Inserting Records :

 INSERT INTO Sales
    ->   VALUES (1, 'Michael', 'S001', 101, '2015-01-02', 125.56),
    ->   (2, 'Jim', 'S003', 103, '2015-01-25', 476.50),
    ->   (3, 'Dwight', 'S012', 122, '2016-02-15', 335.00),
    ->   (4, 'Andy', 'S345', 121, '2016-03-26', 787.00),
    ->   (5, 'Pam', 'S234', 132, '2017-04-19', 678.00),
    ->   (6, 'Karen', 'S743', 111, '2017-05-31', 864.00),
    ->   (7, 'Toby', 'S234', 115, '2018-06-11', 762.00),
    ->   (8, 'Oscar', 'S012', 125, '2019-07-24', 300.00),
    ->   (9, 'Darryl', 'S456', 119, '2019-08-02', 492.20);


3)Fetching All Data of particular partition in table 
select * from Sales Partition(p0);  //p0-partition name

4) selecting particular record from a particular partition 
select S.store_id from (select * from Sales Partition(p1) )as S;

5) Adding a new partition to a table already having partition
****NOTE: added partittions VALUES LESS THAN contrinat value should be always greater than last partition (i.e patition constraint should be incremental in nature)
ALTER TABLE sales ADD PARTITION (
         partition p2024 VALUES LESS THAN (2025)
)

6) Listing partition present on the table:
 SHOW CREATE TABLE table_name

7)Creating a stored Procedure to add new Partition dynamically:
//****** MAIN CORE****************************


DELIMITER //
CREATE PROCEDURE AddPartitionToTable( IN newPartitionValue DATE)
BEGIN

  DECLARE dynamicSQL VARCHAR(1000);
-- Validate input parameters to prevent errors
IF newPartitionValue IS NULL THEN
    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Invalid input parameters';
  END IF;

  -- Ensure table exists before attempting to modify it
  IF NOT EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = "Sales") THEN
      SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Table does not exist';
  END IF;

  -- Create the dynamic SQL statement, using a prepared statement for security
SET @dynamicSQL := CONCAT('ALTER TABLE Sales', ' ADD PARTITION (PARTITION p', DATE_FORMAT(newPartitionValue, '%Y%m%d'), ' VALUES LESS THAN (Year(''', newPartitionValue, ''')))');


  PREPARE stmt FROM @dynamicSQL;
  EXECUTE stmt;
  DEALLOCATE PREPARE stmt;

END //



DELIMITER ;


 