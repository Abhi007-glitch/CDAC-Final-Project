### Restaurant table schema
create table Restaurant (rest_id int primary key AUTO_INCREMENT,
 name varchar(40), image_id varchar(50), address varchar(60), contact_no varchar(10),email varchar(10));

 or (same)
CREATE TABLE Restaurant (
    rest_id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(40),
    image_id VARCHAR(50),
    address VARCHAR(60),
    contact_no VARCHAR(10),
    email VARCHAR(30)
);

### Item table schema 
CREATE TABLE Item (
  item_id int AUTO_INCREMENT,
  itemName varchar(60),
  picture_id varchar(50),   ********************Need to deal with this
  item_description varchar(255)
  is_veg boolean,
  // cusineType Enum
  price int,
  rest_id int not null,
  dish_type varchar(60),
  PRIMARY KEY (item_id, rest_id) -- Include rest_id in the primary key
) 

##### RestItem (get items from rest)
CREATE TABLE rest_item ( 
   rest_id int, 
   item_id int,
   primary key(rest_id,item_id) 
)PARTITION BY RANGE (rest_id) (
  PARTITION p0 VALUES LESS THAN (1)
);

** Procedure to create partition 

-- will need to call seprately by firing query from backend
DELIMITER // 

CREATE PROCEDURE add_partition_for_restaurant(IN new_restaurant_id INT)
BEGIN
  DECLARE max_restaurant_id INT;
  DECLARE partition_name VARCHAR(255);


    SET partition_name = CONCAT('p', new_restaurant_id);

    -- Use a prepared statement for dynamic SQL execution
    SET @dynamicSQL := CONCAT('ALTER TABLE rest_item ADD PARTITION (PARTITION ', partition_name, ' VALUES LESS THAN (', new_restaurant_id + 1, '))');

    PREPARE stmt FROM @dynamicSQL;
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt;
  
END; //

DELIMITER ;



// Trigger to update the partition data when ever a new item is added in any rest
// Normal(vi JPA query) insertion updation deletion on item table will get's automatically reflected

// for insertion 

DELIMITER //
CREATE TRIGGER insert_item_into_rest_item AFTER INSERT ON Item
FOR EACH ROW
BEGIN
  DECLARE inserted_rest_id INT;
  DECLARE partition_name varchar(255);
  SET inserted_rest_id = NEW.rest_id;
  SET partition_name = CONCAT('p', NEW.rest_id);

  -- Insert into appropriate partition based on rest_id
  INSERT INTO rest_item (item_id, rest_id)
  VALUES (NEW.item_id, NEW.rest_id);
END; //

DELIMITER ;


// for deletion  - [PARTITION (p{deleted_rest_id}) not working currently ]

DELIMITER //
CREATE TRIGGER delete_item_from_rest_item AFTER DELETE ON Item
FOR EACH ROW
BEGIN
  DECLARE deleted_rest_id INT;
  DECLARE partition_name varchar(255);
  SET deleted_rest_id = OLD.rest_id;  
  SET partition_name = CONCAT('p', OLD.rest_id);

  -- Directly delete from partition for efficiency and clarity
  DELETE FROM rest_item
  WHERE item_id = OLD.rest_id;

END;//

DELIMITER ;




// for updation

Delimiter //
CREATE TRIGGER update_item_from_restitem After Update ON Item
FOR EACH ROW 
BEGIN
  DECLARE rest_id INT ;
  DECLARE partition_name varchar(255);
  SET rest_id = NEW.rest_id;
  SET partition_name = CONCAT('p', NEW.rest_id);
  
  -- Updating records in particular partition 
  UPDATE rest_item  set item_id=NEW.item_id
  WHERE item_id =OLD.item_id;
  
END; //

Delimiter ;



**** 





***********************************************************************************
                            DishToRest
***********************************************************************************
anytime a new item is added in any rest then it's value would be checked manually (using JPA) if it is already present in dishToDishPartition table
// if no matching value then we will be required to manually fire the procedure to create a new partition and insert value into it
// else get the partition name and based on it update DishToRest table by adding/ updating/ deleting new record. --> to be done by firing query from the backEnd.


#DishNameToPartitionMapping
Create table dish_name_to_partition_mapping (   
dish_id int AUTO_INCREMENT ,
dish_name varchar(40),
primary key (dish_id)
)


Create table search_rest_by_item(  
dish_id int,
rest_id int, 
primary key (dish_id, rest_id)
)PARTITION BY RANGE (dish_id) (
  PARTITION p0 VALUES LESS THAN (0)
);


// procedure to create partition of SearchRestByItem table whenever a Item with some new Dish Type is added 


DELIMITER // 

CREATE PROCEDURE add_partition_for_Dish(IN new_dish_id INT)
BEGIN
  DECLARE max_dish_id INT;
  DECLARE partition_name VARCHAR(255);


    SET partition_name = CONCAT('p', new_dish_id);

    -- Use a prepared statement for dynamic SQL execution
    SET @dynamicSQL := CONCAT('ALTER TABLE search_rest_by_item ADD PARTITION (PARTITION ', partition_name, ' VALUES LESS THAN (', new_dish_id + 1, '))');

    PREPARE stmt FROM @dynamicSQL;
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt;
  
END; //

DELIMITER ;

***********************************************************************************
                        cuisineToRest
***********************************************************************************

#cuisineNameToMapping
Create table cuisine_name_to_partition (
cuisine_id bigint AUTO_INCREMENT ,
cuisine_name bigint,
primary key (cuisine_id)
)

Create table search_rest_by_cuisine(  
cuisine_id int,
rest_id int, 
primary key (cuisine_id, rest_id)
)PARTITION BY RANGE (cuisine_id) (
  PARTITION p0 VALUES LESS THAN (1)  
);



 // here we will have no dynamic partitioning just static as per no of cuisine pre decided
 //runs whenever new cuisine is added in cuisine_name_to_partition
DELIMITER // 


CREATE PROCEDURE add_partition_for_cuisine(IN new_cuisine_id INT)
BEGIN
  DECLARE max_cuisine_id INT;
  DECLARE partition_name VARCHAR(255);


    SET partition_name = CONCAT('p', new_cuisine_id);

    -- Use a prepared statement for dynamic SQL execution
    SET @dynamicSQL := CONCAT('ALTER TABLE search_rest_by_cuisine ADD PARTITION (PARTITION ', partition_name, ' VALUES LESS THAN (', new_cuisine_id + 1, '))');

    PREPARE stmt FROM @dynamicSQL;
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt;
  
END; //

DELIMITER ;


************************************************************************************
                                 ORDERS TABLE ***********************************************************************************

CREATE TABLE Orders (
    order_id INT AUTO_INCREMENT,
    cust_id INT,
    rest_id INT,
    item_id INT,
    quantity INT,
    order_time TIME,
    status ENUM('preparing', 'completed'),
    cart_id Int,    
    PRIMARY KEY (order_id, cust_id, item_id,rest_id,cart_id ) 
)
PARTITION BY RANGE (rest_id) (
        PARTITION p0 VALUES LESS THAN (1)
    );



*** Procedure to create partitions in order table ---> will be called when a new restaurant will get registered(just like how partition in item table are created)!!
//runs whenever new dish is added in dish_name_to_partition_mapping

DELIMITER //

CREATE PROCEDURE add_partition_in_orders(IN new_restaurant_id INT)
BEGIN
  DECLARE max_restaurant_id INT;
  DECLARE partition_name VARCHAR(255);

    SET partition_name = CONCAT('p', new_restaurant_id);
    -- Use a prepared statement for dynamic SQL execution
    SET @dynamicSQL := CONCAT('ALTER TABLE orders ADD PARTITION (PARTITION ', partition_name, ' VALUES LESS THAN (', new_restaurant_id + 1, '))');

    PREPARE stmt FROM @dynamicSQL;
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt;
   
 
END //

DELIMITER ;


// inseting values into Orders :

INSERT INTO Orders (cust_id, rest_id, item_id, quantity, status)
VALUES 
    (1, 4, 1, 2, 'preparing'),
    (1, 4, 2, 1, 'preparing'),
    (2, 4, 3, 3, 'preparing'),
    (2, 4, 4, 2, 'preparing'),
    (3, 4, 5, 2, 'preparing'),
    (3, 4, 6, 1, 'preparing'),
    (4, 4, 7, 3, 'preparing'),
    (4, 4, 8, 1, 'preparing'),
    (5, 4, 9, 2, 'preparing'),
    (5, 4, 10, 1, 'preparing'),
    (6, 5, 11, 3, 'preparing'),
    (6, 5, 12, 2, 'preparing'),


// ****************** DELETING RECORDS IN a partitioned table 


// Restaurant owner after preparing all the records will click on completed button, at that time we will delete all the records of the given cust_id and rest_id from the order partition table. -- at the same time we could ask customer for the review.



DELIMITER $$
CREATE PROCEDURE delete_orders_by_cust_id_and_rest_id(IN customer_id INT, IN rest_id INT)
BEGIN
 
  DECLARE total_deleted INT DEFAULT 0;
  DECLARE partition_name VARCHAR(64);

  -- Construct partition name dynamically
  SET partition_name = CONCAT('p', rest_id);


  START TRANSACTION;
    DELETE FROM Orders
    WHERE cust_id = customer_id;
    SET total_deleted = ROW_COUNT();
  COMMIT;

 IF total_deleted > 0 THEN
    SELECT CONCAT('00001', ' Orders deleted for customer ', customer_id, ' in restaurant ', rest_id);
  ELSE
    SELECT CONCAT('00002', ' No orders found for customer ', customer_id, ' in restaurant ', rest_id);
  END IF;
END$$
DELIMITER ;


//


***************** COMMAND TO DELETE,update,Insert and Select RECORD FROM SPECIFIC partition and specific id or attribute value ************************ 

 DELETE FROM orders PARTITION(p4) where cust_id=1;
 UPDATE Orders Partition(p4) SET status = 'completed' WHERE order_id = 3;
 INSERT INTO Orders Partition(p4) (cust_id, rest_id, item_id, quantity, status) values (6,4,11,4,'preparing');
 select * from orders Partition(p4) where status='complete';
SELECT TABLE_NAME, SUBPARTITION_NAME
    -> FROM information_schema.PARTITIONS
    -> WHERE TABLE_NAME = 'restaurant' AND SUBPARTITION_NAME = 'P1';
SELECT TABLE_NAME, PARTITION_NAME
FROM information_schema.PARTITIONS
WHERE TABLE_NAME = 'restaurant' AND PARTITION_NAME = 'P1';











